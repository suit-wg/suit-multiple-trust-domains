<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.22 (Ruby 3.3.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-09" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2024" month="December" day="09"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 48?>

<t>This specification describes extensions to the SUIT Manifest format for
use in deployments with multiple trust domains. A device has more than
one trust domain when it enables delegation of different rights to
mutually distrusting entities for use for different purposes or
Components in the context of firmware or software update.</t>



    </abstract>



  </front>

  <middle>


<?line 56?>

<section anchor="Introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>software Components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded Component</t>
  <t>single-object Dependencies</t>
  <t>a partly encrypted Manifest so that distribution does not reveal private information</t>
  <t>installation performed by a different execution mode than payload fetch</t>
</list></t>

<t>Dependency Manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios. For example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate Software with separate signing authorities. Dependencies allow the Software for the primary processor to reference a Manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of Update Payloads. The network operator overrides the URI of a Payload by providing a dependent Manifest that references the original Manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new Software version before releasing it. The configuration is delivered as a binary in the same way as a Software Image. The device operator references the Software Manifest from the Software author in their own Manifest which also defines the configuration.</t>
  <t>An Author wants to entrust a Distributor to provide devices with firmware decryption keys, but not permit the Distributor to sign code. Dependencies allow the Distributor to deliver a device's decryption information without also granting code signing authority.</t>
  <t>A Trusted Application Manager (TAM) wants to distribute personalisation information to a Trusted Execution Environment in addition to a Trusted Application (TA), but does not have code signing authority. Dependencies enable the TAM to construct an update containing the personalisation information and a dependency on the TA, but leaves the TA signed by the TA's Author.</t>
</list></t>

<t>By using Dependencies, Components such as Software, configuration, and other Resource data authenticated by different Trust Anchors can be delivered to devices.</t>

<t>These mechanisms are not part of the core Manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.
<?line -6?></t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware/Software, configuration, or Resource data such as text or images.</t>
  <t>Resource: A piece of information that is used to construct a Payload.</t>
  <t>Manifest: A Manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the Manifest, an authentication wrapper with cryptographic information protecting the Manifest, authorization information, and severable elements (see Section 5.1 of <xref target="I-D.ietf-suit-manifest"/>).</t>
  <t>Update: One or more Manifests that describe one or more Payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign Updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a Manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the Commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B Images: Dividing a Recipient's storage into two or more bootable Images, at different offsets, such that the active Image can write to the inactive Image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of Commands.</t>
  <t>Update Procedure: A superset of Staging Procedure and Installation Procedure.</t>
  <t>Staging Procedure: A procedure that fetches dependencies and images referenced by an Update and stores them to a Staging Area.</t>
  <t>Installation Procedure: A procedure that installs dependencies and images stored in a Staging Area; copying (and optionally, transforming them) into an active Image storage location.</t>
  <t>Invocation Procedure: A Procedure in which a Recipient verifies Dependencies and Images, loading Images, and invokes one or more Image.</t>
  <t>Staging Area: A Component or group of Components that are used for transient storage of Images between fetch and installation. Images in this area are opaque, except for use by the Installation Procedure.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or Resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B Image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error Condition.</t>
  <t>Trust Anchor: A Trust Anchor, as defined in <xref target="RFC6024"/>, represents an
    authoritative entity via a public key and associated data.  The
    public key is used to verify digital signatures, and the
    associated data is used to constrain the types of information for
    which the Trust Anchor is authoritative.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All Dependency Manifests must be present before any Payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All Dependencies must be validated prior to loading.</t>
</list></t>

<t>Steps 3 and 5 are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers" type="1">
  <t>Verify the signature of the Manifest.</t>
  <t>Verify the applicability of the Manifest.</t>
  <t>Resolve Dependencies.</t>
  <t>Fetch Payload(s).</t>
  <t>Verify Candidate.</t>
  <t>Install Payload(s).</t>
</list></t>

<t>In addition, when multiple Manifests are used for an Update, each Manifest's steps occur in a lockstep fashion; all Manifests have Dependency resolution performed before any Manifest performs a Payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the Envelope and Manifest have several new elements added.</t>

<t>The Envelope gains one more elements: Integrated Dependencies. The Common metadata section in the Manifest also gains a list of Dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A Dependency is another SUIT_Envelope that describes additional Components.</t>

<t>As described in <xref target="Introduction"/>, Dependencies enable several common use cases.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling Dependencies. By default, any signature of a Dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different Components/Commands/Parameters), it MAY choose to skip signature verification of Dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of Dependencies until the list of affected Components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all Components specified in a Dependency, then that Dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the Dependency.</t>

<t>Components that should be treated as Dependency Manifests are identified in the suit-common metadata. See <xref target="structure-change"/> for details.</t>

<t>If the Manifest contains more than one Component and/or Dependency, each Command sequence MUST begin with a Set Component Index Command.</t>

<t>If a Dependency is specified, then the Manifest processor MUST perform the following checks:</t>

<t><list style="numbers" type="1">
  <t>The dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each Dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support Dependencies and a Manifest specifies a Dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent Components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by a single Manifest and all its Dependencies that together:</t>

<t><list style="numbers" type="1">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a Payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent Manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the Root Manifest should be stored; this is particularly complex when a system has multiple, independent Root Manifests. The Manifest Component ID resolves this contention. The manifest-component-id is intended to be used by the Root Manifest. When a Dependency Manifest also declares a Component ID, the Dependency Manifest's Component ID is overridden by the Component ID declared by the dependent.</t>

<t>The following CDDL describes the Manifest Component ID:</t>

<figure><sourcecode type="cddl"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of Component indices that indicate a Dependency Manifest. The keys of the map are the Component indices and the values of the map are any extra metadata needed to describe those Dependency Manifests.</t>

<t>Because some operations treat Dependency Manifests differently from other Components, it is necessary to identify them. SUIT_Dependencies identifies which Components from suit-components (see Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as Dependency Manifest Envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a Component prefix or other metadata may be delivered with the Component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="cddl"><![CDATA[
$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The Components specified by SUIT_Dependency will contain a Manifest Envelope that describes a Dependency of the current Manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the Dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a Component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a Dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the Dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a Manifest does not break Dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the Dependency operates. This allows the Dependency to be forwarded on to a Component that is capable of parsing its own Manifests. It also allows one Manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent Component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A Dependency prefix can be used with a Component identifier. This allows complex systems to understand where Dependencies need to be applied. The Dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the Dependency.</t>

<t>A Dependency prefix can also be used to indicate when a Dependency Manifest needs to be processed by a secondary Manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of Dependencies, some changes are necessary to the abstract machine, outside the typical scope of added Commands. These changes alter the behaviour of an existing Command and way that the parser processes Manifests:</t>

<t><list style="symbols">
  <t>Five new Commands are introduced:  <list style="symbols">
      <t>Set Parameters</t>
      <t>Process Dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
      <t>Unlink</t>
    </list></t>
  <t>Dependency Manifests are also Components. All Commands may target Dependency Manifests as well as Components, with one exception: process Dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lockstep with the Root Manifest. This means that every Dependency's current Command sequence must be executed before a dependent's later Command sequence may be executed. For example, every Dependency's Dependency Resolution step MUST be executed before any dependent's Payload fetch step.</t>
  <t>When a Manifest Processor supports multiple independent Components, they MAY have shared Dependencies.</t>
  <t>When a Manifest Processor supports shared Dependencies, it MUST support reference counting of those Dependencies.</t>
  <t>When reference counting is used, Components MUST NOT be overwritten. The Manifest Uninstall section must be called, then the component MUST be Unlinked.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each Manifest must invoke each of its Dependencies' sections from the corresponding section of the dependent. Any changes made to Parameters by the Dependency persist in the dependent.</t>

<t>When a Process Dependency Command is encountered, the Manifest processor:</t>

<t><list style="numbers" type="1">
  <t>Checks whether the map of Dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the Dependency has been the target of a Dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified Component as a Dependency Manifest Envelope.</t>
  <t>Authenticates the Dependency Manifest.</t>
  <t>Executes the common-sequence section of the Dependency Manifest.</t>
  <t>Executes the section of the Dependency Manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified Dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the Dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another Trusted Execution Environment (TEE) technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a Manifest processor might be required in each. The first Manifest processor is the normal Manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second Manifest processor only executes sections when the first Manifest processor requests it. An API interface is provided from the second Manifest processor to the first. This allows the first Manifest processor to request a limited set of operations from the second. These operations are limited to: setting Parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second Manifest processor declares a prefix to the first, which tells the first Manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first Manifest processor encounters a Dependency prefix, that informs the first Manifest processor that it should provide the second Manifest processor with the corresponding Dependency Envelope. This is done when the Dependency is fetched. The second Manifest processor immediately verifies any authentication information in the Dependency Envelope. When a Parameter is set for any Component that matches the prefix, this Parameter setting is passed to the second Manifest processor via an API. As the first Manifest processor works through the Procedure (set of Command sequences) it is executing, each time it sees a Process Dependency Command that is associated with the prefix declared by the second Manifest processor, it uses the API to ask the second Manifest processor to invoke that Dependency section instead.</t>

<t>This mechanism ensures that the two or more Manifest processors do not need to trust each other, except in a very limited case. When Parameter setting across trust domains is used, it must be very carefully considered. Only Parameters that do not have an effect on security properties should be allowed. The Dependency Manifest MAY control which Parameters are allowed to be set by using the Override Parameters Directive. The second Manifest processor MAY also control which Parameters may be set by the first Manifest processor by means of an ACL that lists the allowed Parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the Manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the Commands needed to acquire and process the Dependencies of the current Manifest. All Dependency Manifests SHOULD be fetched before any Payload is fetched to ensure that all Manifests are available and authenticated before any of the (larger) Payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All Commands are modified in that they can also target Dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in Dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similar to suit-directive-override-parameters, suit-directive-set-parameters allows the Manifest to configure behavior of future Directives by changing Parameters that are read by those Directives. Set Parameters is for use when Dependencies are used because it allows a Manifest to modify the behavior of its Dependencies.</t>

<t>Available Parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a Parameter is already set, suit-directive-set-parameters will skip setting the Parameter to its argument. This allows dependent Manifests to change the behavior of a Manifest, a Dependency that wishes to enforce a specific value of a Parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the Commands in the common section of the current Dependency, followed by the Commands in the equivalent section of the current Dependency. For example, if the current section is "Payload Fetch," this will execute "Common metadata" in the current Dependency, then "Payload Fetch" in the current Dependency. Once this is complete, the Command following suit-directive-process-dependency will be processed.</t>

<t>If the current Component index does not have an entry in the suit-dependencies map, then this Command MUST Abort.</t>

<t>If the current Component index has not been the target of a suit-condition-dependency-integrity, then this Command MUST Abort.</t>

<t>If the current Component is True, then this Directive applies to all Dependencies. If the current section is "Common metadata," then the Command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the Dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether the current Component index is present in the Dependency list. If the current Component is in the Dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all Dependencies or on all non-Dependency Components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a Dependency Manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers" type="1">
  <t>Verify the signature of the Dependency's suit-authentication-wrapper.</t>
  <t>Compare the Dependency's suit-authentication-wrapper digest to the dependent's suit-parameter-image-digest</t>
  <t>Verify the Dependency Manifest against the Depedency's suit-authentication-wrapper digest</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current Manifest. The Manifest Processor MUST NOT use cached results from any other Manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's Component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>A manifest processor that supports multiple independent root manifests
MUST support suit-directive-unlink. When a Component is no longer
needed, the Manifest processor unlinks the Component to inform the 
Manifest processor that it is no longer needed.</t>

<t>If a Manifest is no longer needed, the Manifest Processor unlinks it.
This causes the Manifest Processor to execute the suit-uninstall section
of the unlinked Manifest, after which it decrements the reference count
of the unlinked Manifest. The suit-uninstall section of a manifest
typically contains an unlink of all its dependencies and components.</t>

<t>All components, including Manifests must be unlinked before deletion 
or overwrite. If the
reference count of a component is non-zero, any command that alters
that component MUST cause an immediate ABORT. Affected commands are:</t>

<t><list style="symbols">
  <t>suit-directive-copy</t>
  <t>suit-directive-fetch</t>
  <t>suit-directive-write</t>
</list></t>

<t>The unlink Command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given Manifest more than once, and the Manifest processor must enforce this. The Manifest processor MAY choose to ignore an Unlink Directive depending on device policy.</t>

<t>When the reference counter of a Manifest reaches zero, the suit-uninstall Command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in Manifest processors,
but Manifest processors that support multiple independent Root Manifests
MUST support suit-directive-unlink.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional Components, it may be that there is a need to uninstall the Components that have been installed by a Manifest. Where this is expected, the uninstall Command sequence can provide the sequence needed to cleanly remove the Components defined by the Manifest and its Dependencies. In general, the suit-uninstall Command Sequence will contain primarily unlink Directives.</t>

<t>WARNING: This can cause faults where there are loose Dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a Component can be removed while it is depended upon by another Component. To avoid Dependency faults, a Manifest author MAY use explicit Dependencies where possible, or a Manifest processor MAY track references to loose Dependencies via reference counting in the same way as explicit Dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The suit-uninstall Command Sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="staging-and-installation"><name>Staging and Installation</name>

<t>In order to coordinate between download and installation in different trust domains, the Update Procedure defined in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.6 is divided into two sub-procedures:</t>

<t><list style="symbols">
  <t>The Staging Procedure: This procedure is responsible for dependency resolution and acquiring all payloads required for the Update to proceed. It is composed of two command sequences  <list style="symbols">
      <t>suit-dependency-resolution</t>
      <t>suit-payload-fetch</t>
    </list></t>
  <t>The Installation Procedure: This procedure is responsible for verifying staged components and installing them. It is composed of:  <list style="symbols">
      <t>suit-candidate-verification</t>
      <t>suit-install</t>
    </list></t>
</list></t>

<t>This extension is backwards compatible when used with a Manifest Processor that supports the Update Procedure but = does not support the Staging Procedure and Installation Procedure: the payload-fetch command sequence already contains suit-condition-image tests for each payload (see <xref target="I-D.ietf-suit-manifest"/>, section 7.3) which means that images are already validated when suit-install is invoked. This makes suit-candidate-verification OPTIONAL to implement and OPTIONAL to parse.</t>

<t>The Staging and Installation Procedures are only required when Staging occurs in a different trust domain to Installation.</t>

<section anchor="suit-candidate-verification"><name>suit-candidate-verification</name>

<t>This command sequence is responsible for verifying that all elements of an update are present and correct prior to installation. This is only required when Installation occurs in a trust domain different from Staging, such as an installer invoked by the bootloader.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating Manifests. These templates explain which Parameters, Commands, and orders of Commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a Dependency Manifest as appropriate.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following Commands are placed into the Dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any Dependency is declared, the dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to Parameters in a Dependency persist in the dependent.</t>

<section anchor="integrated-dependencies"><name>Integrated Dependencies</name>

<t>An implementer MAY choose to place a Dependency's Envelope in the Envelope of its dependent. The dependent Envelope key for the Dependency Envelope MUST be a text string. The URI for the Dependency MUST match the text string key of the dependent's Envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a Dependency Manifest that is removed from the Envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a Manifest so that it can be used as a Dependency. To use an encrypted Manifest, create a plaintext dependent, and add the encrypted Manifest as a Dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match Condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext Manifest and its encrypted Dependency may also form a composite Manifest (<xref target="integrated-dependencies"/>).</t>

</section>
<section anchor="template-override-encryption-info"><name>Overriding Encryption Info Template</name>

<t>The goal of overriding the Encryption Info template is to separate the role of generating encrypted Payload and Encryption Info with Key-Encryption Key addressing Section 3 of <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>As an example, this template describes two manifests:
- The dependent Manifest created by the Distribution System contains Encryption Info, allowing the Device to generate the Content-Encryption Key.
- The dependency Manifest created by the Author contains Commands to decrypt the encrypted Payload using Encryption Info above and to validate the plaintext Payload with SUIT_Digest.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following operations are placed into the Dependency resolution block of dependent Manifest:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at dependency Manifest</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Image Digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>) of dependency Manifest</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
</list></t>

<t>The following Commands are placed into the Fetch/Install block of dependent Manifest</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at dependency Manifest</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>The following Commands are placed into the same block of dependency Manifest:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at to be decrypted Payload</t>
  <t>Override Parameters Directive (see Section 8.4.10.3 of <xref target="I-D.ietf-suit-manifest"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
    </list></t>
  <t>Copy Directive (see Section 8.4.10.5 of <xref target="I-D.ietf-suit-manifest"/>) consuming the Encryption Info above</t>
</list></t>

<t>The Distribution System can Set the Parameter URI in the Fetch/Install block of dependent Manifest if it wants to overwrite the URI of encrypted Payload.</t>

<t>Because the Author and the Distribution System have different roles and MAY be separate entities, it is highly RECOMMENDED to leverage permissions (see Section 9 of <xref target="I-D.ietf-suit-manifest"/>).
For example, The Device can protect itself from attacker who breaches the Distribution System by allowing only the Author's Manifest to modify the Component of (to be) decrypted Payload.</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple Components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-dependency. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all Dependency Manifests, the following Commands are added to the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no Commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The Image fetch sequence contains the following Commands:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some Components are "installed" or "loaded" it is more productive to use lists of Component indices rather than Component Index = True. For example, to install several Components, the following Commands should be placed in the Image Install Sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for the Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument containing list of destination Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index Directive, with argument containing list Dependency Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries created by draft-ietf-suit-manifest:</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>18</c>
      <c>Candidate Verification</c>
      <c><xref target="suit-candidate-verification"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>5</c>
      <c>Manifest Component ID</c>
      <c><xref target="manifest-id"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Dependencies</c>
      <c><xref target="SUIT_Dependencies"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a Manifest format protecting and describing how to retrieve, install, and invoke Images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">




<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
         <organization>Inria</organization>
      </author>
      <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day="9" month="December" year="2024"/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an Internet of Things (IoT) device), where to find
   the code/data, the devices to which it applies, and cryptographic
   information protecting the manifest.  Software updates and Trusted
   Invocation both tend to use sequences of common operations, so the
   manifest encodes those sequences of operations, rather than declaring
   the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-32"/>
   
</reference>


<reference anchor="I-D.ietf-suit-firmware-encryption">
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         <organization>University of Applied Sciences Bonn-Rhein-Sieg</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="David Brown" initials="D." surname="Brown">
         <organization>Linaro</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="7" month="December" year="2024"/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-firmware-encryption-22"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">




<reference anchor="I-D.ietf-suit-update-management">
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="8" month="July" year="2024"/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-update-management-07"/>
   
</reference>


<reference anchor="I-D.ietf-teep-architecture">
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname="Mingliang Pei" initials="M." surname="Pei">
         <organization>Broadcom</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Dave Thaler" initials="D." surname="Thaler">
         <organization>Microsoft</organization>
      </author>
      <author fullname="Dave Wheeler" initials="D. M." surname="Wheeler">
         <organization>Amazon</organization>
      </author>
      <date day="24" month="October" year="2022"/>
      <abstract>
	 <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment.  This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-teep-architecture-19"/>
   
</reference>

<reference anchor="RFC6024">
  <front>
    <title>Trust Anchor Management Requirements</title>
    <author fullname="R. Reddy" initials="R." surname="Reddy"/>
    <author fullname="C. Wallace" initials="C." surname="Wallace"/>
    <date month="October" year="2010"/>
    <abstract>
      <t>A trust anchor represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative. A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor. This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6024"/>
  <seriesInfo name="DOI" value="10.17487/RFC6024"/>
</reference>

<reference anchor="RFC7228">
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="M. Ersue" initials="M." surname="Ersue"/>
    <author fullname="A. Keranen" initials="A." surname="Keranen"/>
    <date month="May" year="2014"/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7228"/>
  <seriesInfo name="DOI" value="10.17487/RFC7228"/>
</reference>

<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9124">
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <date month="January" year="2022"/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9124"/>
  <seriesInfo name="DOI" value="10.17487/RFC9124"/>
</reference>




    </references>

</references>


<?line 613?>

<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="cddl"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$SUIT_severable-members-extensions //=
    (suit-candidate-verification => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-dependency-integrity, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-candidate-verification = 18
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-process-dependency"><name>Example 0: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<t>The dependency Manifest:</t>

<figure><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'\
    A2FFB59E9F1A29D20BF655BC1DE909CB7EDD972A6C09D50FC42983778670715E'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'\
A506F1647E3A9E0F54A07F303443F33E3CFA28520BE1E93C467CD8B14954E460C604\
        A7623F146D833B6F0A2454095855573C48B18570066FA7472077313E80CE'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        ['10']
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'\
    2EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B861BE0C4A2'
        ] >>,
        / parameter-image-size / 14: 190,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 20: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'\
    0F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 373</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820A2FFB59E9F1A29D20BF655BC1DE909CB7E
DD972A6C09D50FC42983778670715E584AD28443A10126A0F65840A506F1
647E3A9E0F54A07F303443F33E3CFA28520BE1E93C467CD8B14954E460C6
04A7623F146D833B6F0A2454095855573C48B18570066FA7472077313E80
CE0358F9A70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5857880C0114A3035824822F
58202EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B86
1BE0C4A20E18BE157821687474703A2F2F6578616D706C652E636F6D2F64
6570656E64656E742E737569741502030F1458538E0C0114A1035824822F
58200F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEA
B78EF3D8070F0B000C0014A112581A20696E206D756C7469706C65207472
75737420646F6D61696E73120F
]]></artwork></figure>

<t>The dependent Manifest (fetched from "https://example.com/dependent.suit"):</t>

<figure><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'\
    0F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'\
D0703EA193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F\
        1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / components / 2: [
        ['00']
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent.suit'
    ],
    / invoke / 9: << [
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00'
      },
      / directive-invoke / 23, 15
    ] >>,
    / install / 20: << [
      / directive-override-parameters / 20, {
        / parameter-content / 18: 'hello world'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 190</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13B
B8FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703E
A193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C5
2F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F
8B035842A6010102000347A102818142303005814E646570656E64656E74
2E73756974094D8414A11746636174203030170F14528414A1124B68656C
6C6F20776F726C64120F
]]></artwork></figure>

</section>
<section anchor="example-1-integrated-dependency"><name>Example 1: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'\
    6391CBC36495B9C87AC3EC841DB124DABD8D3C9FE2DEEFE16569AFC349E7DDB2'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'\
517250281E6567FF9DF519CF9D76A440D86DFEB65B505D180D7D794FEC67823FA0E9\
        8EBC526FBC985777EAB4E2FFE813A44F205C015AEB3FA842F33E37B52716'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        ['10']
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'\
    2EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B861BE0C4A2'
        ] >>,
        / parameter-image-size / 14: 190,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 20: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  "#dependent.suit": h'\
D86BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09\
C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703EA193E12381A66FFA\
DEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F1604B45C405E96B0642F3D\
49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B035842A6010102000347A102818142\
303005814E646570656E64656E742E73756974094D8414A11746636174203030170F\
                            14528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 519</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F58206391CBC36495B9C87AC3EC841DB124DABD
8D3C9FE2DEEFE16569AFC349E7DDB2584AD28443A10126A0F65840517250
281E6567FF9DF519CF9D76A440D86DFEB65B505D180D7D794FEC67823FA0
E98EBC526FBC985777EAB4E2FFE813A44F205C015AEB3FA842F33E37B527
160358BBA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5844880C0114A3035824822F
58202EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B86
1BE0C4A20E18BE156F23646570656E64656E742E737569741502030F1458
288A0C010B000C0014A112581A20696E206D756C7469706C652074727573
7420646F6D61696E73120F6F23646570656E64656E742E7375697458BED8
6BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13BB8
FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703EA1
93E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F
1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B
035842A6010102000347A102818142303005814E646570656E64656E742E
73756974094D8414A11746636174203030170F14528414A1124B68656C6C
6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
wQX3F1NUx9kO0rSVqc8igoN/Xie33P0Tz/QNlV4RyRj9OENltsWU40E5uyxi
sYaLa+JEDypFtFzLQLfIUU5/cpnfUmcfSoAScRU0vfFWBZGcS+kPYql0Wd7K
KPS5TDaxkpTUPxlXRLeYvn05Gw/qjcHdnQBa9BLQHR7B3AYS5AcbzTY8KLGG
NhkSIqX8I7aHIOLxTmi62u7tQ+yvV8Vr6zDaR/4tUmxLsh2fVslKa1F/JGwz
m4ngo6z/8jnBNyMrgjOk96PXgJi9UoDv1LMu1ZNcds81maKPKaLlyWd0C5df
m1/AdonjLL89OjSmcVWfK+K6rWKClGMKOR4YEYUpQcn63v+U/m+8NP723P/R
/9Hz8JcnPMbQSv34aYR2rvcb3xUqh1c1UNVVSCKyeIehhWwHy3YhRbDLn6TW
d//pjNl2lBfcd7pNbMwlEcST7lmiLhq73zyHCMbPYQwEZycwWXV+nQDruM/d
kQW8K2PjEKD+sRmS1bsx/je/tdIT70tDrbD6Q01X6O2X4fqnr6jY+ujew1ly
2zGOQIoyYYq7skeK74KqMNheiV6hqd5+KtGntYE792gu0Fjouxa3j2f5HVkw
bvLRhrfvHPiNjreXY/iNvlc83X6z7XkOGoe5SpNJelPfHegVhD9P/F7xWbtr
kvHzxO8Xq+Qd/cXks43GgS505sCNwY76+/LPE7/V8sQd0v4Ib9wgvwAaXMJF
IG+I1pqC/AIEPjASvLCLcmCzFTkRNheyOglf2sRkFILCQX1gI9EDTOouIolD
jYj6lbgOQHfY1TNPx5OzIWpY62anmzYwf5mv5fWo++do+vnpc/+rl6ffDM+n
/pfT7+hT79np518Mr6bDZ6Nnn4+2v3x+9qw9gL8/H4/F77fTL0af12+D29PR
8M9/vhqu//rdz38df/3502ed+jejsTf++buz/C+f1gc/f76Kt3/6Kl1Pnp6/
Ob6O/vLi+uXw+Xg4PJsukynazr/8MvjT9Tevo7D3PFnd/PLL0/7L/Mb76tOL
KP/22/n14maYnmeXX77Ks/F309e3Xz7P0+df/CUavBi1nn96Gw+/zrM3q5fN
1rN2/mX0LS9r+nxSXhRt2fl1sTn5enMBB44Su80IAabwqF5KmUa4A3tfj56e
jg3kzV7dTm+/++LL5K+nb36uj4d//u5U/D4Z/nk+AXRNr/8UjD7/pf30l19u
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
ee9vKJvk+asNZTSV3Yby/wfP0MzDGdcAAA==

-->

</rfc>

